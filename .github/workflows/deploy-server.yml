name: Deploy Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Clean Gradle Build (Skip Tests & Checkstyle)
        working-directory: backend
        run: |
          chmod +x ./gradlew
          ./gradlew clean --no-daemon
          ./gradlew build -x test -x compileTestJava -x checkstyleMain -x editorconfigCheck -x checkstyleTest --no-daemon

      - name: Docker build & push
        working-directory: backend
        run: |
          echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/icestudyroom:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/icestudyroom:latest

      - name: Get GitHub Actions Runner IP
        run: |
          RUNNER_IP=$(curl -s ifconfig.me)
          if [[ -z "$RUNNER_IP" ]]; then
            echo "Error: Unable to retrieve GitHub Actions Runner IP."
            exit 1
          fi
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          echo "GitHub Actions Runner IP: $RUNNER_IP"

      - name: Add SSH IP to EC2 Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
            --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: "${{ secrets.KEY }}"
          script: |
            CONTAINER_NAME="backend"
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/icestudyroom:latest"

            # 기존 컨테이너 삭제
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            fi

            # 최신 이미지 가져오기
            sudo docker pull $IMAGE_NAME

            # .env 이동
            sudo mv /home/ubuntu/.env /home/ubuntu/backend/.env

            # 컨테이너 실행
            sudo docker run -d --name $CONTAINER_NAME -p 8080:8080 --restart always --env-file /home/ubuntu/backend/.env $IMAGE_NAME

      - name: Clean Up Unused Docker Images
        run: sudo docker image prune -f

      - name: Remove SSH IP from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
            --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
