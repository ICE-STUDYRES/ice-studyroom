name: Deploy Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Build with Gradle
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker build & push
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_REPO }}/backend:latest ./backend
          docker push ${{ secrets.DOCKER_REPO }}/backend:latest

      - name: Get GitHub Actions Runner IP
        run: |
          echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV
          echo "GitHub Actions Runner IP: $RUNNER_IP"

      - name: Add SSH IP to EC2 Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
            --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Copy .env to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          source: ".env"
          target: "/home/ubuntu/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            CONTAINER_NAME="backend"
            IMAGE_NAME="${{ secrets.DOCKER_REPO }}/backend:latest"

            # 기존 컨테이너 삭제
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            fi

            # 최신 이미지 가져오기
            sudo docker pull $IMAGE_NAME

            # 컨테이너 실행 (환경변수 적용)
            sudo docker run -d --name $CONTAINER_NAME -p 8080:8080 --restart always --env-file /home/ubuntu/.env $IMAGE_NAME

            # 사용하지 않는 이미지 정리
            sudo docker image prune -f

      - name: Remove SSH IP from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
            --region ${{ secrets.AWS_REGION }} || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
